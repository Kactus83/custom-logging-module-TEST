"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dockerOptions = exports.coloredOptions = exports.classicOptions = void 0;
const LoggerStylesConfig_1 = require("./LoggerStylesConfig");
const TerminalStyles_1 = require("../types/TerminalStyles");
const ColorsMaps_1 = require("./ColorsMaps");
const TerminalColors_1 = require("../types/TerminalColors");
// Définition initiale de styles par défaut pour réutilisation
const defaultStyles = {
    default: [TerminalStyles_1.TerminalStyles.None]
};
const defaultStyles_Tag = {
    default: [TerminalStyles_1.TerminalStyles.Bright]
};
const defaultStyles_Timestamps = {
    default: [TerminalStyles_1.TerminalStyles.Dim]
};
// Construction de la configuration pour le mode CLASSIC
exports.classicOptions = {
    timestamp: new LoggerStylesConfig_1.LoggerElementConfig(defaultStyles_Timestamps, defaultStyles_Timestamps),
    logLevel: new LoggerStylesConfig_1.LoggerElementConfig(defaultStyles_Tag, defaultStyles_Tag),
    serviceName: new LoggerStylesConfig_1.LoggerElementConfig(defaultStyles_Tag, defaultStyles_Tag),
    message: new LoggerStylesConfig_1.LoggerElementConfig(defaultStyles, defaultStyles),
    colorMapping: ColorsMaps_1.DarkColorMapping,
    mainProcessColor: TerminalColors_1.ColorChoice.White
};
// Construction de la configuration pour le mode COLORED
const coloredStyles = {
    default: [TerminalStyles_1.TerminalStyles.None],
    trace: [TerminalStyles_1.TerminalStyles.Dim],
    debug: [TerminalStyles_1.TerminalStyles.Dim],
    info: [TerminalStyles_1.TerminalStyles.None],
    warn: [TerminalStyles_1.TerminalStyles.None],
    error: [TerminalStyles_1.TerminalStyles.None]
};
const coloredStyles_Tags = {
    default: [TerminalStyles_1.TerminalStyles.None],
    trace: [TerminalStyles_1.TerminalStyles.Dim],
    debug: [TerminalStyles_1.TerminalStyles.Dim],
    info: [TerminalStyles_1.TerminalStyles.None],
    warn: [TerminalStyles_1.TerminalStyles.Bright],
    error: [TerminalStyles_1.TerminalStyles.Bright]
};
exports.coloredOptions = {
    timestamp: new LoggerStylesConfig_1.LoggerElementConfig(defaultStyles_Timestamps, defaultStyles_Timestamps),
    logLevel: new LoggerStylesConfig_1.LoggerElementConfig(coloredStyles_Tags, coloredStyles_Tags),
    serviceName: new LoggerStylesConfig_1.LoggerElementConfig(coloredStyles_Tags, coloredStyles_Tags),
    message: new LoggerStylesConfig_1.LoggerElementConfig(coloredStyles, coloredStyles),
    colorMapping: ColorsMaps_1.DarkColorMapping,
    mainProcessColor: TerminalColors_1.ColorChoice.Cyan,
    subProcessColor: TerminalColors_1.ColorChoice.Blue
};
// Construction de la configuration pour le mode DOCKER
const dockerStyles = {
    default: [TerminalStyles_1.TerminalStyles.Bright],
    trace: [TerminalStyles_1.TerminalStyles.Dim],
    debug: [TerminalStyles_1.TerminalStyles.Reset],
    info: [TerminalStyles_1.TerminalStyles.Bright],
    warn: [TerminalStyles_1.TerminalStyles.Blink],
    error: [TerminalStyles_1.TerminalStyles.Reverse]
};
const dockerStyles_Tags = {
    default: [TerminalStyles_1.TerminalStyles.None],
    trace: [TerminalStyles_1.TerminalStyles.Dim],
    debug: [TerminalStyles_1.TerminalStyles.Dim],
    info: [TerminalStyles_1.TerminalStyles.None],
    warn: [TerminalStyles_1.TerminalStyles.Bright],
    error: [TerminalStyles_1.TerminalStyles.Bright]
};
exports.dockerOptions = {
    timestamp: new LoggerStylesConfig_1.LoggerElementConfig(defaultStyles_Timestamps, defaultStyles_Timestamps),
    logLevel: new LoggerStylesConfig_1.LoggerElementConfig(dockerStyles_Tags, dockerStyles_Tags),
    serviceName: new LoggerStylesConfig_1.LoggerElementConfig(dockerStyles_Tags, dockerStyles_Tags),
    message: new LoggerStylesConfig_1.LoggerElementConfig(dockerStyles, dockerStyles),
    colorMapping: ColorsMaps_1.DarkColorMapping,
    mainProcessColor: TerminalColors_1.ColorChoice.Random,
    subProcessColor: TerminalColors_1.ColorChoice.Random
};
//# sourceMappingURL=LoggerStylesConfigLib.js.map