"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerStylesConfig = exports.LoggerElementConfig = void 0;
const LogLevel_1 = require("../types/LogLevel");
const TerminalColors_1 = require("../types/TerminalColors");
const TerminalStyles_1 = require("../types/TerminalStyles");
const ColorsMaps_1 = require("./ColorsMaps");
class LoggerElementConfig {
    constructor(mainProcess, subProcess) {
        this.MainProcess = mainProcess;
        this.SubProcess = subProcess;
    }
    getStyles(isMainProcess, level) {
        const processStyles = isMainProcess ? this.MainProcess : this.SubProcess;
        return this.resolveStyles(processStyles, level);
    }
    resolveStyles(styles, level) {
        switch (level) {
            case LogLevel_1.LogLevel.TRACE: return styles.trace || styles.default;
            case LogLevel_1.LogLevel.DEBUG: return styles.debug || styles.default;
            case LogLevel_1.LogLevel.INFO: return styles.info || styles.default;
            case LogLevel_1.LogLevel.WARN: return styles.warn || styles.default;
            case LogLevel_1.LogLevel.ERROR: return styles.error || styles.default;
            default: return styles.default;
        }
    }
}
exports.LoggerElementConfig = LoggerElementConfig;
class LoggerStylesConfig {
    constructor() {
        this.mainProcessColor = TerminalColors_1.ColorChoice.White;
        this.subProcessColor = TerminalColors_1.ColorChoice.White;
        this.colorMapping = ColorsMaps_1.DarkColorMapping;
        // Initialisation avec des styles par défaut pour chaque élément de log
        let defaultElementStyles = { default: [TerminalStyles_1.TerminalStyles.Reset] };
        this.timestamp = new LoggerElementConfig(defaultElementStyles, defaultElementStyles);
        this.logLevel = new LoggerElementConfig(defaultElementStyles, defaultElementStyles);
        this.serviceName = new LoggerElementConfig(defaultElementStyles, defaultElementStyles);
        this.message = new LoggerElementConfig(defaultElementStyles, defaultElementStyles);
    }
    // Méthode pour fusionner la configuration actuelle avec une nouvelle
    updateConfig(newConfig) {
        if (newConfig.timestamp) {
            this.timestamp = new LoggerElementConfig(newConfig.timestamp.MainProcess, newConfig.timestamp.SubProcess);
        }
        if (newConfig.logLevel) {
            this.logLevel = new LoggerElementConfig(newConfig.logLevel.MainProcess, newConfig.logLevel.SubProcess);
        }
        if (newConfig.serviceName) {
            this.serviceName = new LoggerElementConfig(newConfig.serviceName.MainProcess, newConfig.serviceName.SubProcess);
        }
        if (newConfig.message) {
            this.message = new LoggerElementConfig(newConfig.message.MainProcess, newConfig.message.SubProcess);
        }
        if (newConfig.mainProcessColor) {
            this.mainProcessColor = newConfig.mainProcessColor;
        }
        if (newConfig.subProcessColor) {
            this.subProcessColor = newConfig.subProcessColor;
        }
        if (newConfig.colorMapping) {
            this.colorMapping = newConfig.colorMapping;
        }
    }
}
exports.LoggerStylesConfig = LoggerStylesConfig;
//# sourceMappingURL=LoggerStylesConfig.js.map