import { LogLevel } from "../types/LogLevel";
import { ColorChoice } from "../types/TerminalColors";
import { TerminalStyles } from "../types/TerminalStyles";
export interface LoggerElementStyles {
    default: TerminalStyles[];
    trace?: TerminalStyles[];
    debug?: TerminalStyles[];
    info?: TerminalStyles[];
    warn?: TerminalStyles[];
    error?: TerminalStyles[];
}
export declare class LoggerElementConfig {
    MainProcess: LoggerElementStyles;
    SubProcess: LoggerElementStyles;
    constructor(mainProcess: LoggerElementStyles, subProcess: LoggerElementStyles);
    getStyles(isMainProcess: boolean, level: LogLevel): TerminalStyles[];
    private resolveStyles;
}
export declare class LoggerStylesConfig {
    timestamp: LoggerElementConfig;
    logLevel: LoggerElementConfig;
    serviceName: LoggerElementConfig;
    message: LoggerElementConfig;
    mainProcessColor: ColorChoice;
    subProcessColor: ColorChoice;
    colorMapping: {
        [key in ColorChoice]: string;
    };
    constructor();
    updateConfig(newConfig: LoggerStylesConfigOptions): void;
}
export interface LoggerStylesConfigOptions {
    timestamp?: LoggerElementConfig;
    logLevel?: LoggerElementConfig;
    serviceName?: LoggerElementConfig;
    message?: LoggerElementConfig;
    mainProcessColor?: ColorChoice;
    subProcessColor?: ColorChoice;
    colorMapping?: {
        [key in ColorChoice]: string;
    };
}
