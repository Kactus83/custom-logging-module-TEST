"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerStyleService = void 0;
const LogLevel_1 = require("../../../types/LogLevel");
const TerminalStyles_1 = require("../../../types/TerminalStyles");
const StyleConfigManager_1 = require("./StyleConfigManager");
class LoggerStyleService {
    constructor() {
    }
    formatMessage(processMetadata, level, message) {
        const stylesConfig = StyleConfigManager_1.StyleConfigManager.getInstance().getLoggerStylesConfig();
        const colorCode = this.getColorCode(processMetadata, stylesConfig);
        // Récupérez directement les styles nécessaires à partir de la configuration
        const timestampStyles = stylesConfig.timestamp.getStyles(processMetadata.isMainProcess, level);
        const logLevelStyles = stylesConfig.logLevel.getStyles(processMetadata.isMainProcess, level);
        const serviceNameStyles = stylesConfig.serviceName.getStyles(processMetadata.isMainProcess, level);
        const messageStyles = stylesConfig.message.getStyles(processMetadata.isMainProcess, level);
        // Formatage des différentes parties du message
        const now = new Date();
        const timestamp = `[${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}]`;
        const logLevelTag = `[${LogLevel_1.LogLevel[level]}]`;
        const serviceNameTag = `[${processMetadata.serviceName}]`;
        // Appliquez les styles et la couleur à chaque partie du message
        const formattedTimestamp = this.applyStyle(timestamp, timestampStyles, colorCode);
        const formattedLogLevelTag = this.applyStyle(logLevelTag, logLevelStyles, colorCode);
        const formattedServiceNameTag = this.applyStyle(serviceNameTag, serviceNameStyles, colorCode);
        const formattedMessage = this.applyStyle(message, messageStyles, colorCode);
        return `${formattedTimestamp} ${formattedLogLevelTag} ${formattedServiceNameTag} - ${formattedMessage}`;
    }
    getColorCode(metadata, stylesConfig) {
        const color = metadata.isMainProcess ? stylesConfig.mainProcessColor : stylesConfig.subProcessColor;
        return stylesConfig.colorMapping[color];
    }
    applyStyle(text, styles, colorCode) {
        const styleCodes = styles.join('');
        return `${colorCode}${styleCodes}${text}${TerminalStyles_1.TerminalStyles.Reset}`;
    }
}
exports.LoggerStyleService = LoggerStyleService;
//# sourceMappingURL=LoggerStyleService.js.map